Job Automation:
***************
Cron : Chronography is a time-based job scheduler in Unix/Linux
It is a program that enables users to execute commands or scripts 
(group of commands) automatically at a specified time/date.

Crontab configuration:
To check the crontab service:
# service crond status

# crontab -l

Usage:
 crontab [options] file
 crontab [options]
 crontab -n [hostname]

Options:
 -u <user>  define user
 -e         edit user's crontab
 -l         list user's crontab
 -r         delete user's crontab   [Do not execute]
 -i         prompt before deleting
 -n <host>  set host in cluster to run users' crontabs
 -c         get host in cluster to run users' crontabs
 -s         selinux context
 -x <mask>  enable debugging

#
Crontab configuration:

[root@mail init.d]# crontab -l
# Run a Job for every 5 minutes
*/5 * * * * /etc/init.d/vsftpd status >> /var/log/check.log

   * * * * * <command or script_name>
* = Minutes (0-59)
* = Hour    (0-23)
* = Date of the Month (1-31) 
* = Month of the year (1-12)
* = Day of the week(0-6) Where "0" represents Sunday.

Example:
30 3 7 3 1 cp /root/chetan.txt /opt/chetan.txt

08 20 5 7 2 cp -pv /root/*.txt /opt/

To check the scheduled cron jobs:

# crontab -l

To edit or modify the jobs in crontab:

# crontab -e  
********************************************************

[root@masterdns cronjob]# cat cronjob_examples

Linux Crontab Format:
---------------------
 *   *    *   *   *   
MIN HOUR DOM MON DOW CMD

-----------------------------------------
Field   Description     Allowed Value
MIN     Minute field    0 to 59
HOUR    Hour field      0 to 23
DOM     Day of Month    1-31
MON     Month field     1-12
DOW     Day Of Week     0-6
CMD     Command Any command to be executed.
-----------------------------------------

1. Scheduling a Job For a Specific Time:
#This will execute the Full backup shell script (full-backup) on 10th June 08:30 AM

Please note that the time field uses 24 hours format. So, for 8 AM use 8, and for 8 PM use 20.

30 08 10 06 * /etc/init.d/mysqld status >> mysql_service_check.log
30 – 30th Minute
08 – 08 AM
10 – 10th Day
06 – 6th Month (June)
* – Every day of the week

**********************************************************
2. Schedule a Job For More Than One Instance (e.g. Twice a Day)

The following script take a incremental backup twice a day every day.

This example executes the specified incremental backup shell script (incremental-backup) at 11:00 and 16:00 on every day. The comma separated value in a field specifies that the command needs to be executed in all the mentioned time.

00 11,16 * * * /home/keshav/bin/incremental-backup
00 – 0th Minute (Top of the hour)
11,16 – 11 AM and 4 PM
* – Every day
* – Every month
* – Every day of the week

*********************************************************


*******************************************************************
3. Schedule a cron job weekdays(i.e. Monday to Friday) and during working hours(i.e. 9am - 6pm):

Cronjob schedule:
*****************

00 09-18 * * 1-5 /etc/init.d/mysqld status >> /var/log/mysql_service_check.log

# Note:
# 00 – 0th Minute (Top of the hour)
# 09-18 – 9 am, 10 am,11 am, 12 am, 1 pm, 2 pm, 3 pm, 4 pm, 5 pm, 6 pm
# * – Every day
# * – Every month
# 1-5 -Mon, Tue, Wed, Thu and Fri (Every Weekday)

********************************************************************

To check other user cronjob details:
# crontab -u jcnm -l

*******************************************************************

3. Schedule a Job for Specific Range of Time (e.g. Only on Weekdays)

If you wanted a job to be scheduled for every hour with in a specific range of time then use the following.

Cron Job everyday during working hours
This example checks the status of the database everyday (including weekends) during the working hours 9 a.m – 6 p.m

00 09-18 * * * /home/keshav/bin/check-db-status

00 – 0th Minute (Top of the hour)
09-18 – 9 am, 10 am,11 am, 12 am, 1 pm, 2 pm, 3 pm, 4 pm, 5 pm, 6 pm
* – Every day
* – Every month
* – Every day of the week

*******************************************************************
Cron Job every weekday during working hours
This example checks the status of the database every weekday (i.e excluding Sat and Sun) during the working hours 9 a.m – 6 p.m.

00 09-18 * * 1-5 /home/keshav/bin/check-db-status
00 – 0th Minute (Top of the hour)
09-18 – 9 am, 10 am,11 am, 12 am, 1 pm, 2 pm, 3 pm, 4 pm, 5 pm, 6 pm
* – Every day
* – Every month
1-5 -Mon, Tue, Wed, Thu and Fri (Every Weekday)

*******************************************************************
How to View Crontab Entries?

# crontab -l

# crontab -e

# crontab -u keshav -l

Edit:
# crontab -u keshav -e

How to Edit Crontab Entries?

# crontab -e

# crontab -r # To delete entire cronjob

******************************************************************
Instead of specifying values in the 5 fields, we can specify it using a single keyword as mentioned below.

There are special cases in which instead of the above 5 fields you can use @ followed by a keyword — such as reboot, midnight, yearly, hourly.

Table: Cron special keywords and its meaning
Keyword Equivalent
@yearly 0 0 1 1 *
@daily  0 0 * * *
@hourly 0 * * * *
@reboot Run at startup.
8. Schedule a Job For First Minute of Every Year using @yearly

If you want a job to be executed on the first minute of every year, then you can use the @yearly cron keyword as shown below.

This will execute the system annual maintenance using annual-maintenance shell script at 00:00 on Jan 1st for every year.

@yearly /home/keshav/red-hat/bin/annual-maintenance
9. Schedule a Cron Job Beginning of Every Month using @monthly

It is as similar as the @yearly as above. But executes the command monthly once using @monthly cron keyword.

This will execute the shell script tape-backup at 00:00 on 1st of every month.

@monthly /home/keshav/suse/bin/tape-backup
10. Schedule a Background Job Every Day using @daily

Using the @daily cron keyword, this will do a daily log file cleanup using cleanup-logs shell scriptat 00:00 on every day.

@daily /home/keshav/arch-linux/bin/cleanup-logs "day started"
11. How to Execute a Linux Command After Every Reboot using @reboot?

Using the @reboot cron keyword, this will execute the specified command once after the machine got booted every time.

@reboot CMD
**********************************************************